--트리거
--문장 단위 트리거
※ 상품 분류 테이블에 자료 삽입
   자료 삽입 후 '상품 분류 코드가 추가 되었습니다.'라는 메시지를
   트리거를 이용해 출력
   [자료] - 'P601', '신선식품'

--트리거 생성
CREATE OR REPLACE TRIGGER TG_LPROD_INSERT
    AFTER INSERT ON LPROD
BEGIN
    DBMS_OUTPUT.PUT_LINE('상품 분류 코드가 추가 되었습니다.');
END;
--이벤트(INSERT)
INSERT INTO LPROD (LPROD_ID, LPROD_GU, LPROD_NM)
    VALUES (11, 'P601', '신선식품');
--확인
SELECT *
FROM LPROD;

※ 2005년 4월 16일에 상품 'P101000001'을 5개 매입한 다음 재고 수량 UPDATE

--트리거 생성
CREATE OR REPLACE TRIGGER TG_REMAIN_UPDATE
    AFTER INSERT OR UPDATE OR DELETE ON BUYPROD
    FOR EACH ROW
BEGIN
    UPDATE REMAIN
    SET REMAIN_I =  REMAIN_I + :NEW.BUY_QTY,
          REMAIN_J_99 = REMAIN_J_99 + :NEW.BUY_QTY,
                                                  --:NEW : 행 전체를 가르키는 것
                                                  --:NEW.BUY_PROD : 열 지칭
                                                  --:OLD : UPDATE, DELETE 시에
          REMAIN_DATE = '2005/04/16'
    WHERE REMAIN_YEAR = '2005'
       AND PROD_ID = :NEW.BUY_PROD;
END;

SELECT *
FROM BUYPROD;

INSERT INTO BUYPROD (BUY_DATE, BUY_PROD, BUY_QTY, BUY_COST)
    VALUES ('2005/04/16', 'P101000001', 5, 21000);

SELECT *
FROM REMAIN;

--트리거 함수 이용
※ 장바구니 테이블에 신규 판매 자료가 삽입될 때 재고를 처리하는 트리거 생성
--트리거 생성
CREATE OR REPLACE TRIGGER TG_REMAIN_CART_UPDATE
    AFTER INSERT OR UPDATE OR DELETE ON CART
    FOR EACH ROW
DECLARE
    V_QTY CART.CART_QTY%TYPE;
    V_PROD CART.CART_PROD%TYPE;
BEGIN
    IF INSERTING THEN
        V_QTY := :NEW.CART_QTY;
        V_PROD := :NEW.CART_PROD;
    ELSIF UPDATING THEN
        V_QTY := :NEW.CART_QTY - :OLD.CART_QTY;
        --5 > 2로 수정 : 5개(OLD) 2개(NEW) 
        --5 > 10으로 수정 : 5개(OLD) 10개(NEW)
        V_PROD := :NEW.CART_PROD;
    ELSE
        V_QTY := -:OLD.CART_QTY;
        V_PROD := :OLD.CART_PROD;
    END IF;
    UPDATE REMAIN
    SET REMAIN_O = REMAIN_O + V_QTY,
          REMAIN_J_99 = REMAIN_J_99 - V_QTY,
          REMAIN_DATE = SYSDATE
    WHERE REMAIN_YEAR = '2005'
       AND PROD_ID = V_PROD;
    
    DBMS_OUTPUT.PUT_LINE(V_PROD || ' 상품 수량이 변경되었습니다.');
END;

--이벤트1
INSERT INTO CART (CART_MEMBER, CART_NO, CART_PROD, CART_QTY)
    VALUES ('a001', '2021041200001', 'P101000003', 5);

--이벤트2
UPDATE CART
SET CART_QTY = 10
WHERE CART_PROD = 'P101000003'
   AND CART_NO = '2021041200001';

--이벤트3
UPDATE CART
SET CART_QTY = 2
WHERE CART_PROD = 'P101000003'
   AND CART_NO = '2021041200001';

--이벤트4
DELETE FROM CART
WHERE CART_PROD = 'P101000003'
   AND CART_NO = '2021041200001';

--확인
SELECT *
FROM REMAIN
WHERE REMAIN_YEAR = '2005'
   AND PROD_ID = 'P101000003';

UPDATE PROD
SET PROD_MILEAGE = (PROD_PRICE*0.001);
COMMIT;
SELECT PROD_MILEAGE
FROM PROD;

--문제
※ 'f001' 회원이 오늘 상품 'P202000001'을 15개 구매했을 때
   이 정보를 CART 테이블에 저장한 후 재고 수불 테이블과
   회원 테이블의 마일리지를 변경하는 트리거 작성
CREATE OR REPLACE TRIGGER TG_REMAIN_MILEAGE_UPDATE
    AFTER INSERT OR UPDATE OR DELETE ON CART
    FOR EACH ROW
    
DECLARE
    V_MEMID CART.CART_MEMBER%TYPE;
    V_QTY CART.CART_QTY%TYPE;
    V_PROD CART.CART_PROD%TYPE;
    V_MILEAGE PROD.PROD_MILEAGE%TYPE;
    
BEGIN
    IF INSERTING THEN
        V_MEMID := :NEW.CART_MEMBER;
        V_QTY := :NEW.CART_QTY;
        V_PROD := :NEW.CART_PROD;
    ELSIF UPDATING THEN
        V_MEMID := :NEW.CART_MEMBER;
        V_QTY := :NEW.CART_QTY - :OLD.CART_QTY;
        V_PROD := :NEW.CART_PROD;
    ELSE
        V_MEMID := :OLD.CART_MEMBER;
        V_QTY := -:OLD.CART_QTY;
        V_PROD := :OLD.CART_PROD;
    END IF;
    
    SELECT PROD_MILEAGE
    INTO V_MILEAGE
    FROM PROD
    WHERE PROD_ID = V_PROD;
    
    UPDATE MEMBER
    SET MEM_MILEAGE = MEM_MILEAGE + (V_MILEAGE * V_QTY)
    WHERE MEM_ID = V_MEMID;
    
END;

INSERT INTO CART (CART_MEMBER, CART_NO, CART_PROD, CART_QTY)
    VALUES ('f001', '2021041200001', 'P202000001', 15);

UPDATE CART
SET CART_QTY = 10
WHERE CART_NO = '2021041200001'
   AND CART_PROD = 'P202000001';
  
UPDATE CART
SET CART_QTY = 13
WHERE CART_NO = '2021041200001'
   AND CART_PROD = 'P202000001';
  
DELETE FROM CART
WHERE CART_NO = '2021041200001'
   AND CART_PROD = 'P202000001';

SELECT *
FROM CART

--19
SELECT *
FROM PROD
WHERE PROD_ID = 'P202000001';

--9, 18, 0, 27
SELECT *
FROM REMAIN
WHERE PROD_ID = 'P202000001';

--2700
SELECT MEM_MILEAGE
FROM MEMBER
WHERE MEM_ID = 'f001';

ROLLBACK;